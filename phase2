#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#include <time.h>

#define NUM_ACCOUNTS 1
#define NUM_THREADS 3
#define TRANSACTIONS_PER_TELLER 5
#define INITIAL_BALANCE 1000.0

// Shared data structure with mutex
typedef struct {
    int account_id;
    double balance;
    int transaction_count;
    pthread_mutex_t lock; // Mutex for this account
} Account;

// Global accounts array
Account accounts[NUM_ACCOUNTS];

// Deposit function (mutex-protected)
void deposit(int account_id, double amount) {
    pthread_mutex_lock(&accounts[account_id].lock);
    accounts[account_id].balance += amount;
    accounts[account_id].transaction_count++;
    pthread_mutex_unlock(&accounts[account_id].lock);
}

// Withdraw function (mutex-protected)
void withdraw(int account_id, double amount) {
    pthread_mutex_lock(&accounts[account_id].lock);
    accounts[account_id].balance -= amount;
    accounts[account_id].transaction_count++;
    pthread_mutex_unlock(&accounts[account_id].lock);
}

// Thread function
void *teller_thread(void *arg) {
    int teller_id = *(int *)arg;

    for (int i = 0; i < TRANSACTIONS_PER_TELLER; i++) {
        double amount = (rand() % 200); // 0-199
        int deposit_flag = rand() % 2;

        if (deposit_flag) {
            printf("Thread %d: Depositing %.2f\n", teller_id, amount);
            deposit(0, amount);
        } else {
            printf("Thread %d: Withdrawing %.2f\n", teller_id, amount);
            withdraw(0, amount);
        }

        usleep(rand() % 1000);
    }

    return NULL;
}


